class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        //brute force   tc=O(n^4)
        /*
        Arrays.sort(nums);
        List<List<Integer>> ans=new ArrayList<>();
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
                    for(int l=k+1;l<nums.length;l++)
                    {
                        if(nums[i]+nums[j]+nums[k]+nums[l]==target)
                            ans.add(Arrays.asList(nums[i],nums[j],nums[k],nums[l]));
                            
                    }
                }
            }
        }
        return ans;
        */
        
        //2-pointer approach   tc=O(n^3)
        List<List<Integer>> ans=new ArrayList<>();
        if(nums==null || nums.length<4)
            return ans;
        Arrays.sort(nums);
        int n=nums.length;
        for(int i=0;i<n-3;i++)
        {
                if(i!=0 && nums[i]==nums[i-1])
                    continue;
                for(int j=i+1;j<n-2;j++)
                {
                        if(j!=i+1 && nums[j]==nums[j-1])
                            continue;
                   
                        int rem=target-(nums[i]+nums[j]);
                        int l=j+1,h=n-1;
                        while(l<h)
                        {
                            int sum=nums[l]+nums[h];
                            if(sum<rem)  l++;
                            else if(sum>rem) h--;
                            else
                            {
                                ans.add(Arrays.asList(nums[i],nums[j],nums[l],nums[h]));
                                while(l<h && nums[l]==nums[l+1]) l++;
                                while(l<h && nums[h]==nums[h-1]) h--;
                                l++; h--;
                             }
                          }
                 }

           }
        
        return ans;
    }
}
