/*
Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0

Example
Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0

*/

class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        //brute force   tc=O(n^4)
        /*
        int count=0;
        int n=nums1.length;   //length of each array is equal
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                for(int k=0;k<n;k++)
                {
                    for(int l=0;l<n;l++)
                    {
                        if(nums1[i]+nums2[j]+nums3[k]+nums4[l]==0)
                            count++;
                    }
                }
            }
        }
        return count;
        */
        
        // Using HashMap  tc=O(n^2)
        Map<Integer,Integer> map=new HashMap<>();
        int count=0;
        for(int i:nums1)
        {
            for(int j:nums2)
            {
                int sum=i+j;
                map.put(-sum,map.getOrDefault(-sum,0)+1);
            }
        }
        for(int k:nums3)
        {
            for(int l:nums4)
            {
                int sum=k+l;
                count+=map.getOrDefault(sum,0);
            }
        }
        
        return count;
    }
}
